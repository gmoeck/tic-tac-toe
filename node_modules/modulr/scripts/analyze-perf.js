


data = {
  "start": 1334770171549,
  "modules": {
    "": {
      "count": 1,
      "position": 0,
      "childrenDuringInit": {
        "evidence": true
      }
    },
    "console": {
      "count": 1,
      "position": 11,
      "start": 1334770171553,
      "calledAtInit": false,
      "end": 1334770171553
    },
    "evidence/helpers": {
      "count": 2,
      "position": 5,
      "start": 1334770171550,
      "calledAtInit": true,
      "end": 1334770171550
    },
    "evidence/assertionErrors": {
      "count": 1,
      "position": 4,
      "start": 1334770171550,
      "calledAtInit": true,
      "end": 1334770171550
    },
    "evidence/ui/consoleTestRunner": {
      "count": 1,
      "position": 8,
      "start": 1334770171553,
      "calledAtInit": false,
      "childrenDuringInit": {
        "evidence/testRunner": true,
        "evidence/ui/resultPrinter": true,
        "evidence/testResult": true,
        "evidence/helpers": true
      },
      "end": 1334770171553
    },
    "evidence/testRunner": {
      "count": 1,
      "position": 9,
      "start": 1334770171553,
      "calledAtInit": false,
      "childrenDuringInit": {
        "evidence": true,
        "evidence/testResult": true
      },
      "end": 1334770171553
    },
    "printf": {
      "count": 0
    },
    "onExit": {
      "count": 1,
      "position": 7,
      "start": 1334770171552,
      "calledAtInit": true,
      "evalStart": 1334770171552,
      "evalEnd": 1334770171552,
      "end": 1334770171552
    },
    "evidence": {
      "count": 2,
      "position": 1,
      "start": 1334770171550,
      "calledAtInit": true,
      "childrenDuringInit": {
        "evidence/testCase": true,
        "evidence/testResult": true,
        "onExit": true
      },
      "end": 1334770171552,
      "childrenAfterInit": {
        "evidence/ui/consoleTestRunner": true,
        "evidence/testLoader": true
      }
    },
    "console/commandLine": {
      "count": 0
    },
    "evidence/testSuite": {
      "count": 1,
      "position": 13,
      "start": 1334770171553,
      "calledAtInit": false,
      "end": 1334770171553
    },
    "evidence/testLoader": {
      "count": 1,
      "position": 12,
      "start": 1334770171553,
      "calledAtInit": false,
      "childrenDuringInit": {
        "evidence/testSuite": true,
        "evidence/testCase": true
      },
      "end": 1334770171553
    },
    "evidence/ui/resultPrinter": {
      "count": 1,
      "position": 10,
      "start": 1334770171553,
      "calledAtInit": false,
      "childrenDuringInit": {
        "console": true
      },
      "end": 1334770171553
    },
    "console/popup": {
      "count": 0
    },
    "evidence/testCase": {
      "count": 2,
      "position": 2,
      "start": 1334770171550,
      "calledAtInit": true,
      "childrenDuringInit": {
        "evidence/assertions": true,
        "evidence/helpers": true
      },
      "end": 1334770171550
    },
    "evidence/testResult": {
      "count": 3,
      "position": 6,
      "start": 1334770171550,
      "calledAtInit": true,
      "end": 1334770171552
    },
    "evidence/assertions": {
      "count": 1,
      "position": 3,
      "start": 1334770171550,
      "calledAtInit": true,
      "childrenDuringInit": {
        "evidence/assertionErrors": true
      },
      "end": 1334770171550
    }
  },
  "defineStart": 1334770171550,
  "requireMainStart": 1334770171550,
  "defineEnd": 1334770171550,
  "end": 1334770171552,
  "requireMainEnd": 1334770171552
}
function Module(id, data) {
  this._data = data;
  this.id = id;
  this.position = data.position;
  this.count = data.count;
  this.totalTime = data.end - data.start;
  this.wasLazyEvaled = !!data.evalStart;
  this.evalTime = data.evalStart ? data.evalEnd - data.evalStart : null;
  this.calledAtInit = data.calledAtInit;
  Module.instances[id] = this;
}

Module.instances = {}

Module.prototype.getSelfTime = function(stack) {
  if (!this._selfTime) {
    var total = this.totalTime;
    this.getChildrenDuringInit().forEach(function(m) {
      total -= m.totalTime;
    });
    this._selfTime = total;
  }
  return this._selfTime;
};

Module.prototype.getChildrenAfterInit = function() {
  if (!this._childrenAfterInit) {
    this._childrenAfterInit = Object.keys(this._data.childrenAfterInit || []).map(function(id) {
      return Module.instances[id];
    });
  }
  return this._childrenAfterInit;
};

Module.prototype.getChildrenDuringInit = function() {
  if (!this._childrenDuringInit) {
    this._childrenDuringInit = Object.keys(this._data.childrenDuringInit || []).map(function(id) {
      return Module.instances[id];
    });
  }
  return this._childrenDuringInit;
};



function getArrayOfModules(data) {
  var modules = data.modules;
  return Object.keys(modules).map(function(id) {
    var m = modules[id];
    return new Module(id, m);
  });
}

function getSortFunction() {
  return function(a, b) {
    if (!a.position) { return 1; }
    if (!b.position) { return -1; }
    return a.position > b.position ? 1 : -1
  }
}

function displayModules(modules, context) {
  var longestId = findLongestId(modules);
  var title = [];
  title.push(rightPad('', longestId));
  title.push(leftPad('pos', 6));
  title.push(leftPad('count', 6));
  title.push(leftPad('total (ms)', 12));
  title.push(leftPad('self (ms)', 12));
  title.push(leftPad('eval (ms)', 12));
  title.push(leftPad('on init', 12));
  console.log(title.join(' '));
  modules.forEach(function(m) {
    if (!m.id) { return }
    var output = [];
    output.push(rightPad(m.id, longestId));
    output.push(leftPad(m.position || '-', 6));
    output.push(leftPad(m.count, 6));
    output.push(leftPad(m.totalTime, 12));
    output.push(leftPad(m.getSelfTime(), 12));
    output.push(leftPad(m.wasLazyEvaled ? m.evalTime : '-', 12));
    output.push(leftPad(m.calledAtInit ? 'y' : '-', 12));
    console.log(output.join(' '));
  });
}

function rightPad(str, n) {
  str = str + '';
  return str + new Array(n + 1 - str.length).join(' ');
}

function leftPad(str, n) {
  str = str + '';
  return new Array(n + 1 - str.length).join(' ') + str;
}

function findLongestId(modules) {
  var longestId = 0;
  modules.forEach(function(m) {
    if (m.id.length > longestId) {
      longestId = m.id.length;
    }
  });
  return longestId;
}
//getArrayOfModules(data).sort(getSortFunction('id')).forEach(console.log);
displayModules(getArrayOfModules(data).sort(getSortFunction('id')), data);

/*
"start":           1334722276751,
"defineStart":     1334722276751,
"defineEnd":       1334722276769,
"requireMainStart":1334722276769,
"requireMainEnd":  1334722276909,
"end":             1334722276909,*/
