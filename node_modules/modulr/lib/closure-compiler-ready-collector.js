var util = require('util'),
    astCollector = require('./ast-collector'),
    SuperClass = require('./resolved-ast-collector').ResolvedAstCollector,
    _super = SuperClass.prototype,
    uglify = require('uglify-js'),
    processor = uglify.uglify,
    walker = uglify.uglify.ast_walker(),
    identifier = require('module-grapher/lib/identifier');

var RUNTIME = astCollector.getRuntimeAst('modulr.sync.resolved.js');

exports.createClosureCompilerReadyCollector = createClosureCompilerReadyCollector;
exports.create = createClosureCompilerReadyCollector;
function createClosureCompilerReadyCollector(config) {
  return new ClosureCompilerReadyCollector(config);
}

exports.ClosureCompilerReadyCollector = ClosureCompilerReadyCollector;
function ClosureCompilerReadyCollector(config) {
  SuperClass.call(this, config);
}

util.inherits(ClosureCompilerReadyCollector, SuperClass);

(function(p) {
  p.getModuleIdAst = getModuleIdAst;
  function getModuleIdAst(m) {
    return ["string", m.getHashCode()];
  }

  p.renderRuntime = renderRuntime;
  function renderRuntime() {
    return uglify.parser.parse('');
  }

  p.generateCode = generateCode;
  function generateCode(ast) {
    ast = astCollector.toAstRoot(ast);
    /*ast = processor.ast_mangle(ast, {
      toplevel: false,
      except: [],
      defines: this.getConstantsAsAstExpressions()
    });*/
    //ast = processor.ast_squeeze(ast);
    return processor.gen_code(ast, {
      beautify: true,
      inline_script: this.config.inlineSafe
    });
  }

  p.getModuleAst = getModuleAst;
  function getModuleAst(m) {
    var modules = this.getModules(),
        self = this,
        toplevel = {};
    
    function getNamespace(name) {
      if (!toplevel[name]) {
        setNamespace(name);
      }
      return toplevel[name];
    }
    
    function setNamespace(name) {
      toplevel[name] = namespace(m, name);
    }
    
    function isTopLevel(name) {
      if (!(name in toplevel) && name !== 'exports' && name !== 'module') {
        return false;
      }
      var scope = scopeStack.peek();
      while (scope.parent) {
        if (name in scope.names) { return false; }
        scope = scope.parent;
      }
      return true;
    }
    var scopeStack = [];
    scopeStack.peek = function() { return this[this.length - 1]; }
    
    function convertRequireToExportsObj(expr, args) {
      var firstArg = args[0];
      if (expr[0] == "name" && expr[1] == "require" && firstArg[0] == 'string') {
        console.log(expr)
        var ident = identifier.create(firstArg[1]);
        ident = m.resolveIdentifier(ident);
        var output = ['name', namespace(modules[ident], 'exports')];
        console.log(output)
        return output;
      }
    }

    function _lambda(name, args, body) {
      scopeStack.push(body.scope);
      if (name && isTopLevel(name)) {
        name = getNamespace(name);
      }
      body = body.map(walker.walk);
      body.scope = scopeStack.pop();
      return [this[0], name, args, body];
    }

    var ast = walker.with_walkers({
      "new": convertRequireToExportsObj,
      "call": convertRequireToExportsObj,
      "name": function(expr) {
        if (isTopLevel(expr)) {
          return ['name', getNamespace(expr)]
        }
      },
      "toplevel": function(body) {
        scopeStack.push(this.scope);
        var names = this.scope.names;
        for (var key in names) {
          toplevel[key] = namespace(m, key);
        }
      },
      "defun": _lambda,
      
      "function": _lambda,
      
      "var": function(defs) {
        var defs = defs.map(function(def) {
          var ast = def.slice(0),
              name = ast[0];
          
          if (isTopLevel(name)) { ast[0] = getNamespace(name); }
          if (ast.length > 1)   { ast[1] = walker.walk(ast[1]); }
          return ast;
        });
        return [this[0], defs];
      },
    }, function() {
      return walker.walk(processor.ast_add_scope(m.ast));
    });
    //if (toplevel.module) { this.useModuleObj.push(m); }
    return ast;
  }

  p.defineModule = defineModule;
  function defineModule(m) {
    var args = [this.getModuleIdAst(m), ];
    return getFunctionCallStatementAst("define", args);
  }

  p.render = render;
  function render(buffer) {
    var modules = this.getModules();

    buffer.push(this.renderRuntime());

    // convert to array for sorting.
    var arr = [];
    for (id in modules) {
      arr.push(modules[id]);
    }

    arr.sort(function(a, b) {
      return a.getSize() - b.getSize();
    });
    
    arr.forEach(function(m) {
      var freeVariables = ['var',
        [
          [namespace(m, 'exports'), ['object', []]],
          [namespace(m, 'module'), ['object', [['exports', ['name', namespace(m, 'exports')]]]]]
        ]
      ];
      buffer.push(freeVariables);
    }, this);
    
    [modules.fuzzyTime, modules['timeInWords/foo'], modules.clock, modules.program].forEach(function(m) {
      buffer.push(this.getModuleAst(m));
    }, this);
  }
})(ClosureCompilerReadyCollector.prototype);

function namespace(m, name) {
  return 'MODULR_' + m.getHashCode() + '_' + name;
}